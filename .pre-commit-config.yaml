# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
exclude: ".md$"
repos:
  # - repo: https://github.com/pycqa/isort
  #   rev: 5.10.1
  #   hooks:
  #     - id: isort
  #       name: isort (python)
  - repo: local
    hooks:
      - id: pyastrx
        name: PyASTrX linter
        entry: ./.pre-commit-hook/main.py
        language: script
        args: ["-q"]
        types: ["python"]
        description: Check for any violations using the .pyastrx.yaml config
      # - id: pyastrix
      #   name: PyASTrX linter
      #   entry: pyastrix
      #   language_version: python3.10.4
      #   args: ["-l"]
      #   language: python
      #   description: Check for any violations using the .pyastrx.yaml config

        #always_run: true
    # - id: check-merge-conflict
    #     name: check for merge conflicts
    #     description: checks for files that contain merge conflict strings.
    #     entry: check-merge-conflict
    #     language: python
    #     types: [text]
    #   - id: trailing-whitespace
    #     name: trim trailing whitespace
    #     description: trims trailing whitespace.
    #     entry: trailing-whitespace-fixer
    #     language: python
    #     types: [text]
    #     stages: [commit, push, manual]
    #   - id: end-of-file-fixer
    #     name: fix end of files
    #     description: ensures that a file is either empty, or ends with one newline.
    #     entry: end-of-file-fixer
    #     language: python
    #     types: [text]
    #     stages: [commit, push, manual]
      # - id: check-yaml
      #   name: check yaml
      #   description: checks yaml files for parseable syntax.
      #   entry: check-yaml
      #   language: python
      #   types: [yaml]
      #   stages: [commit]
      # - id: check-added-large-files
      #   name: check for added large files
      #   description: prevents giant files from being committed.
      #   entry: check-added-large-files
      #   language: python
      # - id: check-ast
      #   name: check python ast
      #   description: simply checks whether the files parse as valid python.
      #   entry: check-ast
      #   language: python
      #   types: [python]
    #   - id: check-docstring-first
    #     name: check docstring is first
    #     description: checks a common error of defining a docstring after code.
    #     entry: check-docstring-first
    #     language: python
    #     types: [python]
    #   - id: blacki
    #     name: black
    #     description: "Black: The uncompromising Python code formatter"
    #     entry: black
    #     require_serial: true
    #     language: python
    #     exclude: "kedro-init"
    #     types_or: [python, pyi]
    #     args: ["--line-length=79", "--experimental-string-processing"]
    #   - id: docformatter
    #     name: docformatter
    #     description: formats docstrings to follow PEP 257.
    #     entry: docformatter
    #     language: python
    #     types: [text]
    #     args: [--in-place]
    #     stages: [commit]
