{
    "mix_examples.py":[
        ["//ClassDef[pyastrx:match('.*Var', @name)]", [4, 23]],
        ["//ClassDef", [4, 17, 23]],
        [".//ExceptHandler", [31]],
        [
            ".//Constant[not(ancestor::Assign)]",
            [35, 39, 42, 45]
        ],
        [
            ".//Constant[not(ancestor::Assign) and @type='int']",
            [35, 39, 45]
        ]
    ],
    "globals.py": [
        [
            "//Global",
            [4, 8, 19, 31, 35]
        ],
        [
            "//FunctionDef/body/Global/names[not(item=../../Assign/targets/Name/@id)]",
            [31, 8]

        ]
    ],
    "defaults.py": [
        ["//defaults/*[self::Dict or self::List or self::Set or self::Call]",
        [8, 25, 37, 40, 43]
        ]
    ],
    "var_names.py": [
        ["//FunctionDef[@name=body/Assign/targets/Name/@id]", [9]]
    ],
    "recursion.py": [
        [
            "//ClassDef/body/FunctionDef[@name=body//Call/func/Attribute[value/Name[@id='self']]/@attr]",
            [34]
        ],
        [
            "//FunctionDef[@name=body//Call/func/Name/@id and not(parent::node()/parent::ClassDef)]",
            [1, 11, 21, 46]
        ]
    ],
    "deny_list.py":[
        [
            "//Assign/targets/Name[pyastrx:deny-list('list_1', @id)]",
            [1, 7],
            {"deny_dict": {"list_1":["problematic_var_name", "problematic_var_name2"]}}
        ]
    ],
    "allow_list.py":[
        [
            "//Assign/targets/Name[pyastrx:allow-list('list_1', @id)]",
            [3],
            {"allow_dict": {"list_1":["ok_var_name", "ok_var_name2"]}}
        ]
    ]
}